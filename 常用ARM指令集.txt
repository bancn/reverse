一、Android与ARM处理器
ARM处理器架构概述
ARM（Advanced RISC Machines）是一个32位RISC（精简指令集）处理器架构，ARM处理器
则是ARM架构下的微处理器。ARM处理器广泛的使用在许多嵌入式系统。ARM处理器的特点
有指令长度固定，执行效率高，低成本等。
	
ARM处理器家族
	
Android支持的处理器架构
ARM、x86、MIPS


二、寄存器使用规则
汇编:
	芯片，高级语言的逆向，中间语言。
		
分析和修改汇编指令:
	赋值、跳转、算术运算、移位运算、堆栈操作、内存读写指令、函数调用约定。
		
	Thumb(16位)、Thumb2(32位)、ARM(32位)
		
用户模式(usr):
	不分组寄存器(R0-R7)
	分组寄存器(R8-R14)

	传递参数与返回值(R0-R3)
	保存栈顶地址(R13/SP）
	堆栈指针寄存器sp
	保存函数的返回地址(R14/LR)
	程序计数器R15(PC)
	状态寄存器CPSR

重点指令预习：
	数据处理指令(mov)  

	带链接跳转指令(bl)

	堆栈寻址指令(stmfd压栈/ldmfd出栈)

	存储器访问指令
		str写入数据到存储器中
		ldr从存储器中读取数据到寄存器


三、寄存器访问指令（LDR、STR）
存储器（主存，内存）
寄存器中放的数据：可以是字符串，可以是数，也可以是一个地址，它可以放各种类型的数据 
存储地址单元：地址（如0x00004000）与地址中存在的值
	
	LDR：从存储器中加载数据到寄存器 ← Load
	LDR R8,[R9,#4] R8为待加载数据的寄存器，加载值为R9+0x4所指向的存储单元

	STR：将寄存器的数据存储到存储器 → Store
	STR R8,[R9,#4] 将R8寄存器的数据存储到R9+0x4指向的存储单元

	LDM：将存储器的数据加载到一个寄存器列表 →
	LDM R0,｛R1-R3｝将R0指向的存储单元的数据依次加载到R1,R2,R3寄存器

	STM：将一个寄存器列表的数据存储到指定的存储器  ←

	PUSH:将寄存器值推入堆栈
	POP：将堆栈值推出到寄存器

	SWP：将寄存器与存储器之间的数据进行交换
	SWP R1, R1 [R0] 将R1寄存器与R0指向的存储单元的内容进行交换

	堆，队列：数据结构，栈是竖的，后进先出，且只能从栈顶依次填入数据	

LDR、STR指令分为两大类，一种是操作32bit字数据 或 8bit无符号字节数据的，另一种
是操作16bit半字数据或8bit有符号字节数据的。这里先只讲第一类，LDR、LDRB这种。
	LDR  R0, [R1, #4]   
	LDRB R0, [R1, #4]	
	
指令格式：
LDR {cond} {B} {T} <Rd>,{address_mode}
LDR {条件码} {字/无符号字节} {是否有 ! } <目标寄存器>,{第二个操作数的内存地址}

Load/Store指令由两部分组成 
	基址寄存器Rn与地址偏移量
	
地址偏移量分为三种形式（地址偏移量形式相同的指令，机器码数据结构相同） 
	立即数：LDR R0, [R1, #4]
    寄存器：LDR R0, [R1, R2]
    寄存器及移位常数：LDR R0, [R1, R2, LSL #2] 
	
地址计算方法分为三种
	偏移量方法
	LDR R0, [R1, R2, LSL #2]
	事先更新（事先：先计算偏移，再访问内存，最后更新基址寄存器）
	LDR R0, [R1, #4]！ 
	事后更新（事后：先访问内存，然后计算新基址寄存器）
	LDR R0, [R1], #4   
	

四、ARM汇编程序结构
	处理器架构定义
	段定义
	注释与标号
		@=>单行注释
		/**/=>多行注释
	汇编器指令
	子程序与参数传递
		R0-R3这4个寄存器用来传递函数调用的第1到第4个参数，超出的参数通过堆栈来传递
		R0寄存器同时用来存放函数调用的返回值
		被调用的函数在返回前无需恢复这些寄存器的内容


五、常见的ARM指令集
指令格式
	<opcode>：指令助记符
	{<cond>}：执行条件
	{s}：是否影响cpsr寄存器的值
	{.w}：指令宽度说明符.w表示是32位
	{.n}：指令宽度说明符.n表示16位
	<rd>：目的寄存器
	,<rn>：第一个操作数寄存器
	{,<perand2>}：第二个操作数:立即数、寄存器、寄存器移位
		
	eq：相等/z=1
	ne：不相等/标志z=0
	hi：无符号数大于/c=1,z=0   
	cs/hs：无符号数大于或等于/c=1
	cc/lo：无符号数小于/c=0  
	ls：无符号数小于或等于/c=0,z=1
	gt：有符号数大于/z=0,n=v   
	ge：有符号数大于或等于/n=v
	lt：有符号数小于/n!=v   
	le：有符号数小于或等于/z=1,n!=v
	mi：负数/n=1              
	pl：整数或0/n=0
	vs：溢出/v=1           
	vc：没有溢出
	
跳转指令
	B 无条件跳转
	BL 带链接的无条件跳转
	BX 带状态切换的无条件跳转
	BLX 带链接和状态切换的无条件跳转
	B loc_地址
	BEQ、BNE
	
寄存器访问指令
	ldr(<-)/ldrd
	str(->)/strd
	ldm(->)
	stm(<-)
	push(入栈)/pop(出栈)
	swp
	
数据处理指令
	数据传送指令(mov)
		MOV：将立即数或寄存器的数据传送到目标寄存器 ←
		MOV R0, #8 R0=8
		
	数据非传送指令(mvn)
	
	
	算术运算指令(有符号、无符号运算，带进位运算)
		<-
		add/adc		
		sub/rsb/sbc/rsc
		mul/mls/mla   umull/umlal smull/smlal smlad/smlsd
		sdiv/udiv 
		asr(算术右移指令)
		
	逻辑运算指令
		逻辑与：and
		逻辑或：orr
		逻辑异或：eor   
		位清楚指令：bic
		
		移位：实质是乘，除，类似于小数点移位，但相反。小数点左移，数变小；右移变大。
		但逻辑移位，左移变大，右移变小，且按2的倍数进行，因为是2进制。
		<-
		逻辑左移：lsl  
			例如：LSL R0,R1,#2   @R0=R1*4
		逻辑右移：lsr  
		循环右移：ror
		带扩展的循环右移：rrx
		
	比较指令
		cmp/cmn/tst/teq
		例如：cmp R0,#0     @R0寄存器中的值与0比较
		标志位：如z位，这个都可以在动态调试时，寄存器窗口看到
	
其他指令
	空操作指令：nop
	软中断指令：swi
	读状态寄存器指令：mrs
	写状态寄存器指令：msr
	协处理器指令：SWT(切换用户模式)
	伪指令：DCB


六、常见的寻址方式
立即寻址
	例如：mov r0,#0x123  @r0=0x123
	
寄存器寻址
	例如：mov r0,r1  @r0=r1
	
寄存器移位寻址
	LSL(逻辑左移)
	LSR(逻辑右移)
	ASR(算术右移)
	ROR(循环右移)
	RRX(带扩展的循环右移)

	例如：mov r0,r1,lsl #0x2   @r0=r1*4
	
寄存器间接寻址
	例如：ldr r0,[r1]   @将R1寄存器中的值作为地址，取出地址中的值赋予R0
	
基址寻址
	例如：ldr r0,[r1,#-4]  @将R1寄存器的值-0x4的值作为地址，取出地址中的值给R0
	
多寄存器寻址
	例如：ldmia r0,{r1,r2,r3,r4}
	
堆栈寻址
	ldmfa/stmfa
	ldmea/stmea
	ldmfd/stmfd
	ldmed/stmed
	
	例如：
		stmfd sp!,{r1-r7,lr}  (入栈保护)
		ldmfd sp,{r1-r7,lr}   (出栈恢复)
	
块拷贝寻址
	ldmia/stmia
	ldmda/stmda
	ldmib/stmib
	ldmdb/stmdb
	
相对寻址
	相对寻址以程序计算器pc的当前值作为基地址，指令中的地址		
	标号作为偏移量，将两者相加之后得到操作数有效地址。
	
对int a=0;这一句简单高级语言的汇编理解，首先会开辟一个内存存储单元，然后把0x0这个数放入
R0寄存器，然后再把R0寄存器的数据放入内存存储单元。所以：
MOV R0,#0
STR R0，[R11,#0x14+var_20]
